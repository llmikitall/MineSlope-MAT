from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram import F

from aiogram import Router

from Filters.StatusFilter import StatusFilter
from SQLite.UpdateValues import UpdateValue
from SQLite.InsertValues import InsertValues
from SQLite.SelectValues import FindMaxRequest, SelectValues
from Structures.MenuNavigator import OutputInputFormMenu, OutputMainMenu
from Structures.InputClaimToPlayer.InputFormMenu import router as input_form_router
from SQLite.SelectValues import FindExitsRow


router = Router()
router.include_router(input_form_router)


@router.message(StatusFilter(2), F.text.contains("–ù–∞–∑–∞–¥"))
async def ButtonBack(message: Message):
    # –ö–Ω–æ–ø–∫–∞ –¥–µ–ª–∞–µ—Ç status –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è = 1 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    UpdateValue(message.from_user.id, "users", "status", 1)
    await OutputMainMenu(message)


@router.message(StatusFilter(2), F.text.contains("–°–æ–∑–¥–∞—Ç—å"))
async def ButtonCreate(message: Message):
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ—á–∫—É –≤ requests, –º–µ–Ω—è–µ—Ç status –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤ request –Ω–æ–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    userID = message.from_user.id

    await InsertValues("requests",
                       "(userID, topicID)",
                       "(?, ?)",
                       (userID, "4"))

    UpdateValue(userID, "users", "request", str(FindMaxRequest(userID)))

    UpdateValue(userID, "users", "status", 3)
    await OutputInputFormMenu(message)


@router.message(StatusFilter(2), F.text.contains("–ó–∞–ø—Ä–æ—Å ‚Ññ"))
async def ButtonRequest(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    userID = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç –±—É–∫–≤ –∏ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
    try:
        ID = int(message.text.split("‚Ññ")[1])
    except (IndexError, ValueError):
        await message.answer(f"<b>[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞]</b>:")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. (–¢—É—Ç –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å...
    #   ...–Ω–∞–¥–æ SELECT ID FROM requests WHERE userID = ?; –∏ –∫–æ–¥ —Å–æ–∫—Ä–∞—Ç–∏—Ç—Å—è)
    if await FindExitsRow("requests", "ID", int(ID)) == 0:
        await message.answer("<b>[–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –í–∞–º]</b>:")
        return

    # –ò–∑–º–µ–Ω—è–µ–º request –∏ status –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    UpdateValue(userID, "users", "request", int(ID))

    UpdateValue(userID, "users", "status", 3)
    await OutputInputFormMenu(message)


async def OutputClaimToPlayer(message: Message):
    userID = message.from_user.id

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å..." –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö
    kb = [[KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∂–∞–ª–æ–±—É")]]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É)
    listing = await SelectValues("ID, status", "requests", "userID = (?)", [str(userID)])
    listing.sort(reverse=True)

    for i in range(len(listing)):
        emoji = "‚öô"
        if listing[i][1] == "accept":
            emoji = "‚úÖ"
        elif listing[i][1] == "deny":
            emoji = "‚ùå"
        elif listing[i][1] == "viewing":
            emoji = "üîç"

        kb.append([KeyboardButton(text=f"{emoji} –ó–∞–ø—Ä–æ—Å ‚Ññ{listing[i][0]:03d}")])

    kb.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])

    # –û—Ñ–æ—Ä–º–ª—è–µ–º –≤—ã–≤–æ–¥
    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–ª–æ–±—É:"
    Keys = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder=placeholder)
    await message.answer("<b>[–¢–µ–∫—É—â–∏–µ –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã]</b>:", reply_markup=Keys)
