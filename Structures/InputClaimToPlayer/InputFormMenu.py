import os

from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, \
    FSInputFile
from aiogram import F

from aiogram import Router
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Filters.StatusFilter import StatusFilter
from Structures.MenuNavigator import (OutputClaimToPlayerMenu, OutputBox1Menu, OutputBox2Menu, OutputBox3Menu,
                                      OutputBox4Menu, OutputBox5Menu, OutputBox6Menu, OutputMainMenu)
from SQLite.UpdateValues import UpdateValue
from SQLite.UpdateValues import UpdateValues
from SQLite.SelectValues import SelectValues
from Structures.InputClaimToPlayer.Box1Menu import router as box1_router
from Structures.InputClaimToPlayer.Box2Menu import router as box2_router
from Structures.InputClaimToPlayer.Box3Menu import router as box3_router
from Structures.InputClaimToPlayer.Box4Menu import router as box4_router
from Structures.InputClaimToPlayer.Box5Menu import router as box5_router
from Structures.InputClaimToPlayer.Box6Menu import router as box6_router

router = Router()
router.include_routers(box1_router, box2_router, box3_router, box4_router, box5_router, box6_router)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ creating –∏ editing!
@router.message(StatusFilter(3), F.text.contains("–ù–∞–∑–∞–¥"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    request = await SelectValues("request", "users", "userID = (?);", [userID])
    status = await SelectValues("status", "requests", "ID = (?) AND userID = (?);", [int(request[0][0]), str(userID)])
    if status[0][0] == "creating":
        await UpdateValues("requests", "status = 'delete'", "ID = (?) AND userID = (?)",
                           [int(request[0][0]), str(userID)])
    UpdateValue(message.from_user.id, "users", "request", "-")
    UpdateValue(message.from_user.id, "users", "status", 2)
    await OutputClaimToPlayerMenu(message)


@router.message(StatusFilter(3), F.text.contains("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    ID = await SelectValues("request", "users", "userID = (?)", [userID])
    boxs = await SelectValues("box1, box2, box3, box4, box5, box6",
                              "requests",
                              "ID = (?)",
                              [int(ID[0][0])])

    additionally = await SelectValues("status, editable",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][1] == 0:
        await message.answer("–ù–∏-–Ω–∏... –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return

    if additionally[0][0] == "creating":
        check = ""
        if boxs[0][0] == "-":
            check += "  - <b>–í–∞—à –Ω–∏–∫</b>;\n"
        if boxs[0][1] == "-":
            check += "  - <b>–ù–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è</b>;\n"
        if boxs[0][2] == "-":
            check += "  - <b>–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è</b>;\n"
        if check != "":
            await message.answer("[–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É—é—â–µ–µ]:\n" + check)
            return

        text = await PreviewText(message, ID, boxs)

        await UpdateValues("requests", "status = 'await', htmlText = (?)", "ID = (?)",
                           [text, int(ID[0][0])])
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="‚öô –î–µ–π—Å—Ç–≤–∏—è",
            callback_data="actions"
        ))

        messageID = await message.bot.send_message(
            chat_id=-1002691896200,
            message_thread_id=4,
            text=text,
            reply_markup=keyboard.as_markup()
        )
        await UpdateValues("requests", "messageID = (?)", "ID = (?)", [messageID.message_id, int(ID[0][0])])

        # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏)
        if boxs[0][4] != "-":
            splitListing = boxs[0][4].split("\n")
            existing_photos = [path for path in splitListing if os.path.exists(path)]
            if existing_photos:
                media = [InputMediaPhoto(media=FSInputFile(path)) for path in existing_photos]
                await message.bot.send_media_group(
                    chat_id=-1002691896200,
                    message_thread_id=4,
                    media=media,
                    reply_to_message_id=messageID.message_id  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–∫—Å—Ç—É
                )

    UpdateValue(message.from_user.id, "users", "request", "-")
    UpdateValue(message.from_user.id, "users", "status", 1)
    await OutputMainMenu(message)


@router.message(StatusFilter(3), F.text.contains("–í–∞—à –Ω–∏–∫"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    ID = await SelectValues("request", "users", "userID = (?)", [userID])
    additionally = await SelectValues("status, editable",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][1] == 0:
        await message.answer("–ù–∏-–Ω–∏... –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return

    from SQLite.UpdateValues import UpdateValue
    UpdateValue(message.from_user.id, "users", "status", 31)
    await OutputBox1Menu(message)


@router.message(StatusFilter(3), F.text.contains("–ù–∞—Ä—É—à–∏—Ç–µ–ª—å"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    ID = await SelectValues("request", "users", "userID = (?)", [userID])
    additionally = await SelectValues("status, editable",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][1] == 0:
        await message.answer("–ù–∏-–Ω–∏... –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return
    from SQLite.UpdateValues import UpdateValue
    UpdateValue(message.from_user.id, "users", "status", 32)
    await OutputBox2Menu(message)


@router.message(StatusFilter(3), F.text.contains("–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    ID = await SelectValues("request", "users", "userID = (?)", [userID])
    additionally = await SelectValues("status, editable",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][1] == 0:
        await message.answer("–ù–∏-–Ω–∏... –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return

    from SQLite.UpdateValues import UpdateValue
    UpdateValue(message.from_user.id, "users", "status", 33)
    await OutputBox3Menu(message)


@router.message(StatusFilter(3), F.text.contains("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    ID = await SelectValues("request", "users", "userID = (?)", [userID])
    additionally = await SelectValues("status, editable",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][1] == 0:
        await message.answer("–ù–∏-–Ω–∏... –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return

    from SQLite.UpdateValues import UpdateValue
    UpdateValue(message.from_user.id, "users", "status", 34)
    await OutputBox4Menu(message)


@router.message(StatusFilter(3), F.text.contains("–§–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    ID = await SelectValues("request", "users", "userID = (?)", [userID])
    additionally = await SelectValues("status, editable",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][1] == 0:
        await message.answer("–ù–∏-–Ω–∏... –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return

    from SQLite.UpdateValues import UpdateValue
    UpdateValue(message.from_user.id, "users", "status", 35)
    await OutputBox5Menu(message)


@router.message(StatusFilter(3), F.text.contains("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"))
async def ButtonBack(message: Message):
    userID = message.from_user.id
    ID = await SelectValues("request", "users", "userID = (?)", [userID])
    additionally = await SelectValues("status, editable",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][1] == 0:
        await message.answer("–ù–∏-–Ω–∏... –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return

    from SQLite.UpdateValues import UpdateValue
    UpdateValue(message.from_user.id, "users", "status", 36)
    await OutputBox6Menu(message)


async def OutputInputFormMenu(message: Message):
    ID = await SelectValues("request", "users", "userID = (?)", [message.from_user.id])
    additionally = await SelectValues("editable, htmlText",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    boxs = await SelectValues("box1, box2, box3, box4, box5, box6",
                              "requests",
                              "ID = (?)",
                              [int(ID[0][0])])
    if additionally[0][0] == 1:
        kb = [
            [
                KeyboardButton(text=f"‚úçÔ∏è [–í–∞—à –Ω–∏–∫]: {"‚úñ" if boxs[0][0] == "-" else "‚úî"}"),
                KeyboardButton(text=f"üë§ [–ù–∞—Ä—É—à–∏—Ç–µ–ª—å]: {"‚úñ" if boxs[0][1] == "-" else "‚úî"}")
            ],
            [
                KeyboardButton(text=f"üìã [–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è]: {"‚úñ" if boxs[0][2] == "-" else "‚úî"}"),
                KeyboardButton(text=f"üåê [–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã]: {"‚úñ" if boxs[0][3] == "-" else "‚úî"}")
            ],
            [
                KeyboardButton(text=f"üì∑ [–§–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è]: {"‚úñ" if boxs[0][4] == "-" else "‚úî"}"),
                KeyboardButton(text=f"üìö [–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏]: {"‚úñ" if boxs[0][5] == "-" else "‚úî"}")
            ],
            [
                KeyboardButton(text=f"‚óÄ [–ù–∞–∑–∞–¥]"),
                KeyboardButton(text=f"[–°–æ—Ö—Ä–∞–Ω–∏—Ç—å] ‚ñ∂")
            ]
        ]
        text = await PreviewText(message, ID, boxs)
    else:
        kb = [[KeyboardButton(text=f"‚óÄ [–ù–∞–∑–∞–¥]")]]
        text = additionally[0][1]
    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    Keys = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, input_field_placeholder=placeholder)

    messageID = await message.answer(text, reply_markup=Keys)

    if boxs[0][4] != "-":
        splitListing = boxs[0][4].split("\n")
        existing_photos = [path for path in splitListing if os.path.exists(path)]
        if existing_photos:
            media = [InputMediaPhoto(media=FSInputFile(path)) for path in existing_photos]
            await message.answer_media_group(
                media=media,
                reply_to_message_id=messageID.message_id
            )


async def PreviewText(message: Message, ID, boxs):

    additionally = await SelectValues("editable, htmlText",
                                      "requests",
                                      "ID = (?)",
                                      [int(ID[0][0])])
    if additionally[0][0] == 1:
        separator = "--------------------------------\n"

        # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∂–∞–ª–æ–±—ã
        text = (f"<b>–ó–∞–ø—Ä–æ—Å ‚Ññ{int(ID[0][0]):03d}:</b> ‚öô\n"
                f"{separator}"
                f"  <b>1) –ù–∏–∫ –∏–≥—Ä–æ–∫–∞:</b> {boxs[0][0]}\n"
                f"  <b>2) –ù–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</b> {boxs[0][1]}\n"
                f"  <b>3) –¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è:</b> {boxs[0][2]}\n")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∂–∞–ª–æ–±—ã, –≥–¥–µ index - –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞
        index = 3

        if boxs[0][3] != "-":
            index += 1
            text += f"  <b>{index}) –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {boxs[0][3]}\n"
        if boxs[0][5] != "-":
            index += 1
            text += f"  <b>{index}) –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b> {boxs[0][5]}\n"
        if boxs[0][4] != "-":
            index += 1
            text += f"  <b>{index}) –§–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏—è:</b> {"-" if boxs[0][4] == "-" else "‚úÖ"}\n"

        # –ì–∏–ø–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –¥–ª—è {‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–æ: fullname}
        botLink = "<a href='https://t.me/MineSlopeBot'>‚úçÔ∏è</a>"

        fullName = message.from_user.full_name
        user_link = (
            f"<a href='https://t.me/{message.from_user.username}'>{fullName}</a>"
            if message.from_user.username
            else fullName
        )

        text += (f"{separator}"
                 f"{botLink} <b>–ù–∞–ø–∏—Å–∞–Ω–æ</b>: {user_link}\n"
                 f"{separator}")
    else:
        text = additionally[0][1]

    return text
