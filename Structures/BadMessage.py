import os.path
import re

from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Filters.PrivateChatFilter import PrivateChatFilter
from SQLite.SelectValues import SelectValues
from SQLite.UpdateValues import UpdateValues

router = Router()
router.message.filter(PrivateChatFilter())


@router.message(F.photo)
async def BadPhoto(message: Message):
    DOWNLOAD_FOLDER = "Files"
    os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path

    file_name = f"file_{message.from_user.id}.jpg"
    save_path = os.path.join(DOWNLOAD_FOLDER, file_name)
    await message.bot.download_file(file_path, save_path)


@router.message()
async def BadMessage(message: Message):
    await message.answer("<b>–ù–µ –ø–æ–π–º—É...</b> —á—Ç–æ —Ç—ã –≤–≤–æ–¥–∏—à—å?")
    await message.answer_sticker("CAACAgIAAxkBAAEHoX1mucVzt3Z7abLiXoLUUS6Rf2lxNgACEAADwDZPE-qBiinxHwLoNQQ")


@router.callback_query()
async def InlineAccept(callback: CallbackQuery):

    if not await is_admin(callback.from_user.id, callback.message.chat.id, callback.bot):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return

    # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–º–µ–Ω–∞/"–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
    if callback.data == "actions":
        builder = InlineKeyboardBuilder()

        builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_claim"))
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data="denial_claim"))
        builder.add(InlineKeyboardButton(text="üîç –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data="viewing_claim"))

        builder.adjust(2)

        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())

    elif callback.data == "denial_claim":
        builder = InlineKeyboardBuilder()

        builder.add(InlineKeyboardButton(text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∂–∞–ª–æ–±–∞",
                                         callback_data="incorrectly_denial_claim"))
        builder.add(InlineKeyboardButton(text="‚ùå –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                         callback_data="not_found_denial_claim"))
        builder.add(InlineKeyboardButton(text="‚ùå –õ–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞",
                                         callback_data="false_denial_claim"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_claim"))

        builder.adjust(1)

        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif callback.data == "cancel_claim":
        builder = InlineKeyboardBuilder()

        builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_claim"))
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data="denial_claim"))
        builder.add(InlineKeyboardButton(text="üîç –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data="viewing_claim"))

        builder.adjust(2)

        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    elif callback.data == "accept_claim" or callback.data == "viewing_claim" or "denial_claim" in callback.data:
        match = re.search(r'(\d+)', callback.message.text)

        # –î–û–†–ê–ë–û–¢–ê–¢–¨!! –ù—É–∂–Ω–æ –ø–æ–ª–µ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π text html –∫–æ–¥–æ–º
        listing = await SelectValues("*", "requests", "ID = (?)", [int(match.group(0))])

        keyboard = InlineKeyboardBuilder()
        reason = ""
        if callback.data == "accept_claim":
            emoji = "‚úÖ"
            await UpdateValues("requests", "status = 'accept'", "ID = (?)", [int(match.group(0))])
            answer = f"‚úÖ –í–∞—à <b>–∑–∞–ø—Ä–æ—Å ‚Ññ{listing[0][0]}</b> –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω! ‚úÖ"
            await callback.bot.send_message(listing[0][1], answer)
        elif "denial_claim" in callback.data:
            emoji = "‚ùå"
            await UpdateValues("requests", "status = 'deny'", "ID = (?)", [int(match.group(0))])
            if callback.data == "incorrectly_denial_claim":
                reason = "–ü—Ä–∏—á–∏–Ω–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∂–∞–ª–æ–±–∞"
            elif callback.data == "not_found_denial_claim":
                reason = "–ü—Ä–∏—á–∏–Ω–∞: –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            elif callback.data == "false_denial_claim":
                reason = "–ü—Ä–∏—á–∏–Ω–∞: –õ–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞"
            answer = f"‚ùå –í–∞—à <b>–∑–∞–ø—Ä–æ—Å ‚Ññ{listing[0][0]}</b> –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω! ‚ùå\n{reason}"
            await callback.bot.send_message(listing[0][1], answer)
        else:
            keyboard.add(InlineKeyboardButton(
                text="‚öô –î–µ–π—Å—Ç–≤–∏—è",
                callback_data="actions"
            ))
            emoji = "üîç"

            if listing[0][3] != "viewing":
                answer = f"üîç –í–∞—à <b>–∑–∞–ø—Ä–æ—Å ‚Ññ{listing[0][0]}</b> –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! üîç\n{reason}"
                await UpdateValues("requests", "status = 'viewing'", "ID = (?)", [int(match.group(0))])
                await callback.bot.send_message(listing[0][1], answer)
        currentText = listing[0][10]
        text = re.sub(
            r':</b> .?',
            f':</b> {emoji}\n{reason}',
            currentText,
            count=1
        )
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


async def is_admin(userID: int, chatID: int, bot: Bot):
    member = await bot.get_chat_member(chatID, userID)
    return member.status in ["administrator", "creator"]



