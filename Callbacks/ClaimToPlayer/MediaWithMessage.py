from datetime import datetime
import re

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from Callbacks.ClaimToPlayer.AutoReplies import OnlyAdmin
from SQLite.SelectValues import SelectValues
from SQLite.UpdateValues import UpdateValues

router = Router()


@router.callback_query(F.data == "actions_claim")
async def InlineAccept(callback: CallbackQuery):
    if not await is_admin(callback):
        await callback.answer(OnlyAdmin, show_alert=True)
        return

    # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–º–µ–Ω–∞/"–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_claim"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data="denial_claim"))
    builder.add(InlineKeyboardButton(text="üîç –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data="viewing_claim"))

    builder.adjust(2)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())


@router.callback_query(F.data == "denial_claim")
async def DenialInline(callback: CallbackQuery):
    if not await is_admin(callback):
        await callback.answer(OnlyAdmin, show_alert=True)
        return

    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∂–∞–ª–æ–±–∞",
                                     callback_data="incorrectly_denial_claim"))
    builder.add(InlineKeyboardButton(text="‚ùå –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                                     callback_data="not_found_denial_claim"))
    builder.add(InlineKeyboardButton(text="‚ùå –õ–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞",
                                     callback_data="false_denial_claim"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="actions_claim"))

    builder.adjust(1)

    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())


@router.callback_query(F.data.contains("_denial_claim"))
async def ReasonDenialClaim(callback: CallbackQuery):
    if not await is_admin(callback):
        await callback.answer(OnlyAdmin, show_alert=True)
        return

    match = re.search(r'(\d+)', callback.message.text)
    ID = match.group(0)

    reason = ""
    emoji = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"

    if callback.data == "incorrectly_denial_claim":
        reason = "\n<b>–ü—Ä–∏—á–∏–Ω–∞</b>: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∂–∞–ª–æ–±–∞"
    elif callback.data == "not_found_denial_claim":
        reason = "\n<b>–ü—Ä–∏—á–∏–Ω–∞</b>: –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    elif callback.data == "false_denial_claim":
        reason = "\n<b>–ü—Ä–∏—á–∏–Ω–∞</b>: –õ–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞"

    answer = f"‚ùå –í–∞—à <b>–∑–∞–ø—Ä–æ—Å ‚Ññ{ID}</b> –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω! ‚ùå{reason}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–∏—Å–∞–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∂–∞–ª–æ–±—ã.
    additionally = await SelectValues("userID", "requests", "ID = (?)", [int(ID)])
    await callback.bot.send_message(additionally[0][0], answer)

    currentText = await SelectValues("htmlText", "requests", "ID = (?)", [int(ID)])
    currentText = currentText[0][0].split("[statusText]\n")

    currentText[1] = re.sub(
        r'</b>: .*',
        f'</b>: {emoji}{reason}',
        currentText[1],
        count=1
    )

    fullName = callback.from_user.full_name
    username = callback.from_user.username
    user_link = (
        f"<a href='https://t.me/{username}'>{fullName}</a>"
        if username
        else fullName
    )
    # delete <-
    date = datetime.now().strftime("%d.%m.%y")

    if "–û–±—Ä–∞–±–æ—Ç–∞–ª –∂–∞–ª–æ–±—É" not in currentText[1]:
        separator = "--------------------------------\n"
        currentText[1] = f"{currentText[1]}{separator}"
    currentText[1] = f"{currentText[1]}<b>[{date}] –û–±—Ä–∞–±–æ—Ç–∞–ª –∂–∞–ª–æ–±—É:</b> {user_link}\n"

    keyboard = InlineKeyboardBuilder()

    await UpdateValues("requests", "editable = 0, status = 'deny', htmlText = (?)", "ID = (?)",
                       [f"{currentText[0]}[statusText]\n{currentText[1]}", int(ID)])

    await callback.message.edit_text(currentText[1], reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "accept_claim")
async def AcceptClaim(callback: CallbackQuery):
    if not await is_admin(callback):
        await callback.answer(OnlyAdmin, show_alert=True)
        return

    match = re.search(r'(\d+)', callback.message.text)
    ID = match.group(0)
    emoji = "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"

    additionally = await SelectValues("userID", "requests", "ID = (?)", [int(ID)])
    answer = f"‚úÖ –í–∞—à <b>–∑–∞–ø—Ä–æ—Å ‚Ññ{ID}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! ‚úÖ"
    await callback.bot.send_message(additionally[0][0], answer)

    currentText = await SelectValues("htmlText", "requests", "ID = (?)", [int(ID)])
    currentText = currentText[0][0].split("[statusText]\n")

    currentText[1] = re.sub(
        r'</b>: .*',
        f'</b>: {emoji}',
        currentText[1],
        count=1
    )
    # delete ->
    fullName = callback.from_user.full_name
    username = callback.from_user.username
    user_link = (
        f"<a href='https://t.me/{username}'>{fullName}</a>"
        if username
        else fullName
    )
    # delete <-
    date = datetime.now().strftime("%d.%m.%y")

    if "–û–±—Ä–∞–±–æ—Ç–∞–ª –∂–∞–ª–æ–±—É" not in currentText[1]:
        separator = "--------------------------------\n"
        currentText[1] = f"{currentText[1]}{separator}"
    currentText[1] = f"{currentText[1]}<b>[{date}] –û–±—Ä–∞–±–æ—Ç–∞–ª –∂–∞–ª–æ–±—É:</b> {user_link}\n"

    keyboard = InlineKeyboardBuilder()

    await UpdateValues("requests", "editable = 0, status = 'accept', htmlText = (?)", "ID = (?)",
                       [f"{currentText[0]}[statusText]\n{currentText[1]}", int(ID)])

    await callback.message.edit_text(currentText[1], reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "viewing_claim")
async def ViewingClaim(callback: CallbackQuery):
    if not await is_admin(callback):
        await callback.answer(OnlyAdmin, show_alert=True)
        return

    match = re.search(r'(\d+)', callback.message.text)
    ID = match.group(0)
    additionally = await SelectValues("userID, status", "requests", "ID = (?)", [int(ID)])

    emoji = "üîç –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
    if additionally[0][1] != "viewing":
        answer = f"üîç –í–∞—à <b>–∑–∞–ø—Ä–æ—Å ‚Ññ{ID}</b> –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π! üîç"
        await UpdateValues("requests", "status = 'viewing'", "ID = (?)", [int(ID)])
        await callback.bot.send_message(additionally[0][0], answer)

    currentText = await SelectValues("htmlText", "requests", "ID = (?)", [int(ID)])
    currentText = currentText[0][0].split("[statusText]\n")

    currentText[1] = re.sub(
        r'</b>: .*',
        f'</b>: {emoji}',
        currentText[1],
        count=1
    )
    fullName = callback.from_user.full_name
    username = callback.from_user.username
    user_link = (
        f"<a href='https://t.me/{username}'>{fullName}</a>"
        if username
        else fullName
    )
    # delete <-
    date = datetime.now().strftime("%d.%m.%y")

    if "–û–±—Ä–∞–±–æ—Ç–∞–ª –∂–∞–ª–æ–±—É" not in currentText[1]:
        if "–±—ã–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞" in currentText[1]:
            separator = "--------------------------------\n"
            currentText[1] = f"{currentText[1]}{separator}"
        currentText[1] = f"{currentText[1]}<b>[{date}] –û–±—Ä–∞–±–æ—Ç–∞–ª –∂–∞–ª–æ–±—É:</b> {user_link}\n"

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="‚öô –î–µ–π—Å—Ç–≤–∏—è",
        callback_data="actions_claim"
    ))

    await UpdateValues("requests", "editable = 0, htmlText = (?)", "ID = (?)",
                       [f"{currentText[0]}[statusText]\n{currentText[1]}", int(ID)])

    await callback.message.edit_text(currentText[1], reply_markup=keyboard.as_markup())


async def is_admin(callback: CallbackQuery):
    member = await callback.bot.get_chat_member(callback.message.chat.id, callback.from_user.id)
    return member.status in ["administrator", "creator"]
